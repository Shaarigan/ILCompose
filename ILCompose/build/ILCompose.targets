<!--
/////////////////////////////////////////////////////////////////////////////////////
//
// ILCompose - Compose partially implementation both .NET language and IL assembler.
// Copyright (c) Kouji Matsui (@kozy_kekyo, @kekyo@mastodon.cloud)
//
// Licensed under Apache-v2: https://opensource.org/licenses/Apache-2.0
//
/////////////////////////////////////////////////////////////////////////////////////
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    
  <!-- Common -->
    
  <PropertyGroup>
    <ILComposeBuildEnable Condition="'$(ILComposeBuildEnable)' == ''">True</ILComposeBuildEnable>
    <ILComposeBuildEnableCompose Condition="'$(ILComposeBuildEnableCompose)' == ''">True</ILComposeBuildEnableCompose>
    <ILComposeAdjustAssemblyReferences Condition="'$(ILComposeAdjustAssemblyReferences)' == ''">True</ILComposeAdjustAssemblyReferences>
    <ILComposeBuildLogLevel Condition="'$(ILComposeBuildLogLevel)' == ''">Information</ILComposeBuildLogLevel>
    <ILComposeLaunchDebugger Condition="'$(ILComposeLaunchDebugger)' == ''">false</ILComposeLaunchDebugger>
    <ILComposeUsingILAsmManaged Condition="'$(ILComposeUsingILAsmManaged)' == ''">true</ILComposeUsingILAsmManaged>
  </PropertyGroup>

  <!-- Common (internal) -->
    
  <PropertyGroup Condition="('$(MSBuildRuntimeType)' == 'Core') AND ('$(MicrosoftNETBuildTasksTFM)' != '')">
    <_ILCompose_PlatformName>$(MicrosoftNETBuildTasksTFM)</_ILCompose_PlatformName>
  </PropertyGroup>
  <PropertyGroup Condition="('$(MSBuildRuntimeType)' == 'Core') AND ('$(MicrosoftNETBuildTasksTFM)' == '') AND ('$(BundledNETCoreAppTargetFrameworkVersion)' != '')">
    <_ILCompose_PlatformName Condition="$(BundledNETCoreAppTargetFrameworkVersion) &gt;= 5.0">net$(BundledNETCoreAppTargetFrameworkVersion)</_ILCompose_PlatformName>
    <_ILCompose_PlatformName Condition="$(BundledNETCoreAppTargetFrameworkVersion) &lt; 5.0">netcoreapp$(BundledNETCoreAppTargetFrameworkVersion)</_ILCompose_PlatformName>
  </PropertyGroup>
  <PropertyGroup Condition="('$(MSBuildRuntimeType)' == 'Core') AND ('$(MicrosoftNETBuildTasksTFM)' == '') AND ('$(BundledNETCoreAppTargetFrameworkVersion)' == '')">
    <_ILCompose_PlatformName>netcoreapp2.2</_ILCompose_PlatformName>
  </PropertyGroup>
  <PropertyGroup Condition="'$(MSBuildRuntimeType)' != 'Core'">
    <_ILCompose_PlatformName>net462</_ILCompose_PlatformName>
  </PropertyGroup>

  <PropertyGroup>
    <_ILCompose_ToolingDir>$([System.IO.Path]::Combine('$(_ILCompose_ScriptBaseDir)','..','tools','$(_ILCompose_PlatformName)'))</_ILCompose_ToolingDir>
  </PropertyGroup>
        
  <!-- ====================================================================== -->
    
  <!-- Dynamically fixup CoreCLR's ILAsm package.
    IMPORTANT: Adding package references to official CoreCLR ILAsm dynamically does not work well in some environments.
      However, this is a technique used in the official scripts, so it is left as an option...
      https://github.com/dotnet/runtime/blob/ed1595e2b10c32ed076d345567407ba1c081e1dd/src/coreclr/.nuget/Microsoft.NET.Sdk.IL/targets/Microsoft.NET.Sdk.IL.targets#L45
  -->

  <PropertyGroup>
    <_ILCompose_NETCoreSdkRuntimeIdentifier>$(NETCoreSdkPortableRuntimeIdentifier)</_ILCompose_NETCoreSdkRuntimeIdentifier>
    <_ILCompose_NETCoreSdkRuntimeIdentifier Condition="'$(_ILCompose_NETCoreSdkRuntimeIdentifier)' == ''">$(NETCoreSdkRuntimeIdentifier)</_ILCompose_NETCoreSdkRuntimeIdentifier>
    <_ILCompose_MicrosoftNetCoreILAsmPackageRuntimeId Condition="'$(_ILCompose_MicrosoftNetCoreILAsmPackageRuntimeId)' == ''">$(_ILCompose_NETCoreSdkRuntimeIdentifier)</_ILCompose_MicrosoftNetCoreILAsmPackageRuntimeId>
   
    <_ILCompose_MicrosoftNETCoreToolingVersion Condition="'$(_ILCompose_MicrosoftNETCoreToolingVersion)' == ''">6.0.0</_ILCompose_MicrosoftNETCoreToolingVersion>
    <_ILCompose_MicrosoftNetCoreILAsmPackageName>runtime.$(_ILCompose_MicrosoftNetCoreILAsmPackageRuntimeId).Microsoft.NETCore.ILAsm</_ILCompose_MicrosoftNetCoreILAsmPackageName>
  </PropertyGroup>

  <ItemGroup Condition="!($(ILComposeUsingILAsmManaged))">
    <!-- Made NuGet package referrer likes:
       For windows x64: runtime.win-x64.Microsoft.NETCore.ILAsm
       For linux x64: runtime.linux-x64.Microsoft.NETCore.ILAsm
    -->
    <PackageReference
      Include="$(_ILCompose_MicrosoftNetCoreILAsmPackageName)"
      Version="$(_ILCompose_MicrosoftNETCoreToolingVersion)"
      ExcludeAssets="all" PrivateAssets="all" />
  </ItemGroup>
        
  <!-- ====================================================================== -->

  <!-- Building target for ILCompose -->
  <Target Name="ILComposeBuildTarget"
    BeforeTargets="CopyFilesToOutputDirectory"
    Condition="'$(ILComposeBuildEnable)' == 'True'">
    <CallTarget Targets="ILComposePrepare; ILComposeAssembleIL; ILComposeBuildCore" />
  </Target>
    
  <Target Name="ILComposePrepare">
    <ItemGroup>
      <!-- Maybe `IntermediateAssembly` is only one file. -->
      <_ILCompose_PrimaryAssembly Include="@(IntermediateAssembly->'%(FullPath)')" />
      <_ILCompose_ReferenceAssembly Include="@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename)_il.dll')" />
      <_ILCompose_BackupPrimaryAssembly Include="@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename)_backup.dll')" />
    </ItemGroup>
  </Target>
    
  <Target Name="ILComposeAssembleIL"
    Inputs="@(ILComposeTargetIL)"
    Outputs="@(_ILCompose_ReferenceAssembly)">
      
    <!-- For using custom ILAsm -->
    <PropertyGroup Condition="'$(ILComposeILAsmToolPath)' != ''">
      <_ILCompose_ILAsmCommand>&quot;$([MSBuild]::NormalizeDirectory($(ILComposeILAsmToolPath)))&quot;</_ILCompose_ILAsmCommand>
      <_ILCompose_ILAsmCommandOptions>$(ILComposeILAsmToolOptions)</_ILCompose_ILAsmCommandOptions>
    </PropertyGroup>
      
    <!-- For using ILAsm.Managed -->
    <PropertyGroup Condition="('$(ILComposeILAsmToolPath)' == '') AND ($(ILComposeUsingILAsmManaged))">
      <_ILCompose_ILAsmCommand>$(ILAsmManagedBuildToolingRuntimeName)&quot;$(ILAsmManagedBuildToolingPath)&quot;</_ILCompose_ILAsmCommand>
      <_ILCompose_ILAsmCommandOptions>-nologo -quite -dll -output:</_ILCompose_ILAsmCommandOptions>
      <!-- TODO: temporary disabled including debug information (MDB) -->
      <!-- <_ILCompose_ILAsmCommandOptions>-nologo -quite -debug -dll -output:</_ILCompose_ILAsmCommandOptions> -->
    </PropertyGroup>
      
    <!-- For using CoreCLR ILAsm -->
    <PropertyGroup Condition="('$(ILComposeILAsmToolPath)' == '') AND (!$(ILComposeUsingILAsmManaged))">
      <_ILCompose_ILAsmCommandFileName Condition="'$(OS)' == 'Windows_NT'">ilasm.exe</_ILCompose_ILAsmCommandFileName>
      <_ILCompose_ILAsmCommandFileName Condition="'$(OS)' != 'Windows_NT'">ilasm</_ILCompose_ILAsmCommandFileName>
      <_ILCompose_ILAsmCommandDir>$([System.IO.Path]::Combine('$(NuGetPackageRoot)','$(_ILCompose_MicrosoftNetCoreILAsmPackageName.ToLowerInvariant())','$(_ILCompose_MicrosoftNETCoreToolingVersion)','runtimes','$(_ILCompose_MicrosoftNetCoreILAsmPackageRuntimeId)','native'))</_ILCompose_ILAsmCommandDir>
      <_ILCompose_ILAsmCommand>&quot;$([System.IO.Path]::Combine('$(_ILCompose_ILAsmCommandDir)','$(_ILCompose_ILAsmCommandFileName)'))&quot;</_ILCompose_ILAsmCommand>
      <_ILCompose_ILAsmCommandOptions Condition="'$(Optimize)' == 'true'">-nologo -quite -debug -pdbfmt=portable -dll -optimize -output=</_ILCompose_ILAsmCommandOptions>
      <_ILCompose_ILAsmCommandOptions Condition="'$(Optimize)' != 'true'">-nologo -quite -debug -pdbfmt=portable -dll -output=</_ILCompose_ILAsmCommandOptions>
    </PropertyGroup>

    <Exec Command="$(_ILCompose_ILAsmCommand) $(_ILCompose_ILAsmCommandOptions)@(_ILCompose_ReferenceAssembly->'&quot;%(FullPath)&quot;',' ') @(ILComposeTargetIL->'&quot;%(FullPath)&quot;',' ')" />

    <Message Importance="normal" Text="ILCompose: CIL source code assembled. Output=@(_ILCompose_ReferenceAssembly->'%(FullPath)')" />
    <ItemGroup>
      <FileWrites Include="@(_ILCompose_ReferenceAssembly)" />
      <FileWrites Include="@(_ILCompose_ReferenceAssembly->'%(FullPath).mdb')" />
      <FileWrites Include="@(_ILCompose_ReferenceAssembly->'%(RootDir)%(Directory)%(Filename).pdb')" />
    </ItemGroup>

  </Target>

  <Target Name="ILComposeBuildCore"
    Inputs="@(_ILCompose_ReferenceAssembly)"
    Outputs="@(_ILCompose_PrimaryAssembly);@(_ILCompose_BackupPrimaryAssembly)"
    Condition="$(ILComposeBuildEnableCompose)">
    <_ILCompose_GetCombinedReferencesBasePath References="@(ReferencePath)">
      <Output TaskParameter="CombinedReferencesBasePath" PropertyName="_ILCompose_CombinedReferencesBasePath" />
    </_ILCompose_GetCombinedReferencesBasePath>
    <PropertyGroup>
      <ILComposeBuildToolingRuntimeName Condition="'$(ILComposeBuildToolingRuntimeName)' == ''">$(_ILCompose_RuntimeName)</ILComposeBuildToolingRuntimeName>
      <ILComposeBuildToolingDir Condition="'$(ILComposeBuildToolingDir)' == ''">$([System.IO.Path]::GetFullPath('$(_ILCompose_ToolingDir)'))</ILComposeBuildToolingDir>
      <ILComposeBuildToolingPath Condition="'$(ILComposeBuildToolingPath)' == ''">$([System.IO.Path]::Combine('$(ILComposeBuildToolingDir)','$(_ILCompose_ExecutableName)'))</ILComposeBuildToolingPath>
      <_ILCompose_CombinedReferenceBasePathOption>--refs=&quot;$(_ILCompose_CombinedReferencesBasePath)&quot;</_ILCompose_CombinedReferenceBasePathOption>
      <_ILCompose_AdjustAssemblyReferencesOption Condition="$(ILComposeAdjustAssemblyReferences)">--adjustAssemblyRefs</_ILCompose_AdjustAssemblyReferencesOption>
      <_ILCompose_BuildLogLevelOption>--logLevel=$(ILComposeBuildLogLevel) --logtfm=&quot;$(TargetFramework)&quot;</_ILCompose_BuildLogLevelOption>
      <_ILCompose_LaunchDebuggerOption Condition="$(ILComposeLaunchDebugger)">--launchDebugger</_ILCompose_LaunchDebuggerOption>
      <_ILCompose_Options>$(_ILCompose_BuildLogLevelOption) $(_ILCompose_LaunchDebuggerOption) $(_ILCompose_CombinedReferenceBasePathOption) $(_ILCompose_AdjustAssemblyReferencesOption)</_ILCompose_Options>
    </PropertyGroup>
    <Copy SourceFiles="@(_ILCompose_PrimaryAssembly)" DestinationFiles="@(_ILCompose_BackupPrimaryAssembly)" OverwriteReadOnlyFiles="True" Retries="$(CopyRetryCount)" />
    <ItemGroup>
      <FileWrites Include="$(_ILCompose_BackupPrimaryAssembly)" />
    </ItemGroup>
    <Exec WorkingDirectory="$(ILComposeBuildToolingDir)"
        Command="$(ILComposeBuildToolingRuntimeName)&quot;$(ILComposeBuildToolingPath)&quot; $(_ILCompose_Options) @(_ILCompose_PrimaryAssembly->'&quot;%(FullPath)&quot;',' ') @(_ILCompose_ReferenceAssembly->'&quot;%(FullPath)&quot;',' ')" />
    <ItemGroup>
      <FileWrites Include="$(_ILCompose_PrimaryAssembly)" />
      <FileWrites Include="$(_ILCompose_PrimaryAssembly->'%(RootDir)%(Directory)%(Filename).pdb')" />
    </ItemGroup>
  </Target>
</Project>
